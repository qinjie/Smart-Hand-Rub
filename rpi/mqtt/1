from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient
import sys
import time
import random
import logging
import argparse
import os

#CustomMQTT message callback
def customCallback(client, userdata, message):
	print "Received new message :"
	print message.payload + '\n-------------\n'

path = os.path.dirname(os.path.realpath(__file__))

host = 'aflolh6t6129n.iot.ap-southeast-1.amazonaws.com'
rootCAPath = os.path.join(path,'root-CA.crt')
certificatePath = os.path.join(path,'MrDat.cert.pem')
privateKeyPath = os.path.join(path,'MrDat.private.key')

clientId = 'basicPubSub'
topic = '/cronjob'
useWebSocket = True

#Init AWSIoTMQTTClient
myAWSIoTMQTTClient = None

if useWebSocket:
	print "Use Websocket"
	myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId, useWebsocket = True)
	myAWSIoTMQTTClient.configureEndpoint(host, 443)
	myAWSIoTMQTTClient.configureCredentials(rootCAPath)
else:
	myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId)
	myAWSIoTMQTTClient.configureEndpoint(host, 8883)
	myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)

# AWSIOTMQTTClient connection configuration
myAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1,32,20)
myAWSIoTMQTTClient.configureOfflinePublishQueueing(-1) #Infinite pffline Publish queueing
myAWSIoTMQTTClient.configureDrainingFrequency(2) #Draining : 2Hz
myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10) # 10 sec
myAWSIoTMQTTClient.configureMQTTOperationTimeout(5)
# Connect and subscribe to AWS IoT
#print 'connecting.....'
#myAWSIoTMQTTClient.connect()
#myAWSIoTMQTTClient.subscribe(topic, 1, customCallback)
#time.sleep(2)
#print 'done \n'
#publish to the same topic in a loop forever

pathData = os.path.join(path, 'storedata.txt')

if os.path.isfile(pathData):
    print "Data privious didn't send"
    with open(pathData) as f:
	content = f.readlines()
	print content
	#if data sent successful
	os.remove(pathData)
else :
    pathNewData = os.path.join(path, "../scanadv/storedata.txt")
    if os.path.isfile(pathNewData):
	os.rename(pathNewDat, pathData)
    	if os.path.isfile(pathData):
	    print "Have new data"
		with open(pathData) as f:
            	    content = f.readlines()
	    	    content = [x.strip() for x in content]
            	    print content
	    #if data sent sucessful
	    os.remove(pathData)
    else:
	print "No data"
#while True:
#	print 'Running...'
#	myAWSIoTMQTTClient.publish(topic, "Temperature : " + str(25 + random.uniform(0,2)), 1)
#	time.sleep(10)


